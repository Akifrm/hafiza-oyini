class Game {
    start() {
        gameScene.classList.remove('d-none');
        setTimeout(() => {
            gameScene.classList.remove('gameSceneAnim');
        }, 1);
    }
}

const loader = document.querySelector('.loader');
const gameStartScene = document.querySelector('.gameStartScene');
const gameScene = document.querySelector('.gameScene');
const closeModal = document.querySelector('.closeModal');
const settingsScene = document.querySelector('.settingsScene');
const hardLevel = document.querySelector('.hardLevel');

const game = new Game();
setTimeout(() => {
    loader.classList.add('opacity-0');
    gameStartScene.classList.remove('d-none')
    setTimeout(() => {
        loader.classList.add('d-none');
        gameStartScene.classList.remove('gameStartSceneAnim');
    }, 500);
    // const audioElement = document.createElement('audio');
    // audioElement.id = 'backgroundMusic';
    // audioElement.setAttribute('autoplay', "");
    // audioElement.setAttribute('loop', "");
    // audioElement.innerHTML = "<source src='music/robbery-of-the-century-152126.mp3' type='audio/mpeg'>";
    // document.body.appendChild(audioElement);

    const audio = document.getElementById('backgroundMusic');
    const volume = document.getElementById('volume');
    volume.addEventListener('input', () => {
        audio.volume = parseFloat(volume.value / 10000);
    })

    audio.addEventListener('play', function () {
        volume.value = audio.volume;
    });
}, 2500);

const gameStartSceneButtons = [...gameStartScene.children].filter(x => x.tagName == 'BUTTON');
for (const button of gameStartSceneButtons) {
    button.addEventListener('click', e => {
        if (button.dataset.click == 'close') {
            closeModal.classList.remove('d-none');
            setTimeout(() => {
                closeModal.classList.remove('closeModalAnim');
            }, 1);
        } else if (button.dataset.click == 'settings') {
            settingsScene.classList.remove('d-none');
            setTimeout(() => {
                settingsScene.classList.remove('settingsSceneAnim');
            }, 1);
        } else if (button.dataset.click == 'new') {
            hardLevel.classList.remove('d-none');
            setTimeout(() => {
                hardLevel.classList.remove('hardLevelAnim');
            }, 1);
        }
    })
}

const closeModalButtons = [...closeModal.children[1].children].filter(x => x.tagName == 'BUTTON');
for (const button of closeModalButtons) {
    button.addEventListener('click', e => {
        if (button.dataset.click == 'close') {
            closeModal.classList.add('closeModalAnim');
            setTimeout(() => {
                closeModal.classList.add('d-none');
            }, 300);
        } else {
            window.close();
            setTimeout(() => {
                alert('Kapanma kodu çalıştı ama kapanmadı sebebi kullandığın tarayıcı başka tarayıcıda deneyebilirsin (hata konsolda gözüküyor)');
            }, 100);
        }
    })
}

const settingsSceneButtons = [...settingsScene.children].filter(x => x.tagName == 'BUTTON');
let first = true;
for (const button of settingsSceneButtons) {
    button.addEventListener('click', e => {
        if (button.dataset.click == 'close') {
            settingsScene.classList.add('settingsSceneAnim');
            setTimeout(() => {
                settingsScene.classList.add('d-none');
            }, 300);
        } else if (button.dataset.click == 'lang') {
            if (first) button.innerHTML += `<img src="img/azerbaycan.png" alt=""><img src="img/us.png" alt="">`;
            else button.innerHTML = `<img src="img/turkiye.png" alt="">`;
            first = !first;
        }
    })
}

const hardLevelButtons = [...hardLevel.children].filter(x => x.tagName == 'BUTTON');
for (const button of hardLevelButtons) {
    button.addEventListener('click', e => {
        localStorage.setItem('modeLevel', button.dataset.level);
        hardLevel.classList.add('hardLevelAnim');
        gameStartScene.classList.add('gameStartSceneAnim');
        setTimeout(() => {
            gameStartScene.classList.add('d-none');
            hardLevel.classList.add('d-none');
            game.start();
            setTimeout(() => {
                customCardsRepeat();
            }, 2);
        }, 300);
    })
}

function customCardsRepeat() {
    const customCards = document.querySelectorAll('.cards .custom-card>div.card-back');
    for (const crd of customCards) {
        crd.addEventListener('click', e => {
            let cardBack = crd.parentElement.querySelector('.card-back');
            let cardFront = crd.parentElement.querySelector('.card-front');
            cardBack.classList.toggle('card-back-anim');
            cardFront.classList.toggle('custom-card-anim');
        })
    }
}

function createCards(number) {
    if (isNaN(number)) throw new Error('not a number');
    const gameCardsDiv = document.querySelector('.gameScene .cards');
    for (let i = 0; i < number; i++) {
        const newCard = document.createElement('div');
        const newCard2 = document.createElement('div');

        newCard.classList.add('custom-card');
        newCard2.classList.add('custom-card');

        gameCardsDiv.appendChild(newCard);
        gameCardsDiv.appendChild(newCard2);
    }
}

function updateCards() {
    const cards = document.querySelectorAll('.gameScene .cards .custom-card');
    const createCardDesing = createCardDesingFunc(cards.length);
    for (const card of cards) {
        card.innerHTML = `
            <div class="card-front custom-card-anim">
                <div>
                    <span class="cardNumber">1</span>
                    <div class="cardDesing">
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="cardDesing midCardDesing">
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
                <div>
                    <span class="cardNumber">1</span>
                    <div class="cardDesing">
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                        <div>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class='card-back card-back-anim'></div>
        `

        const cardDesing = card.querySelectorAll('.cardDesing');
        for (const c of cardDesing) {
            createCardDesing(c, true);
        }
    }

}

createCards(10);
updateCards();
function createCardDesingFunc(num) {
    let repeat = [], lastRandomColor, lastItems = [], lastItemsLength = 0;

    function random(length, floor) {
        if (length < 0) throw new Error('The input cannot be a negative number.');

        let rndm = Math.random() * (++length);
        if (floor) return rndm;
        return Math.floor(rndm);
    }

    function randomColor() {
        const colors = ["orange", "blue", "yellow", "purple", "green", "pink", "turquoise", "red", "navy", "brown"];
        let color;
        do {
            color = colors[Math.floor(Math.random() * (colors.length + 1))];
        } while (color == lastRandomColor);

        lastRandomColor = color;
        return color;
    }

    return function (card, repeatLast = false) {
        const spans = card.querySelectorAll('span');
        let randomColorSize = 0;

        for (let i = 0; i < spans.length; i++) {
            let span = spans[i];
            let rndmColor = 'black';

            // console.log(lastItemsLength < (num / 2), lastItems)
            // if (lastItemsLength < (num / 2)) {
                if (
                    (!repeatLast || !repeat[i]) &&
                    randomColorSize < 2 &&
                    (
                        !!random(random(1) < random(i) ? 0 : 2) ||
                        (repeat.every(color => color == 'black') && i == spans.length - 1)
                    )
                ) {
                    rndmColor = randomColor();
                    randomColorSize++;
                } else rndmColor = repeat[i];
                if (!rndmColor) rndmColor = 'black';
            // } else {
            //     let colorsList = lastItems[(lastItemsLength + 2) - (num / 2)];
            //     rndmColor = colorsList?.[i];
            //     console.log('aaaaaaaaaaaaaaaaa', colorsList, rndmColor, lastItemsLength, num, lastItemsLength - num - 1);
            // }
            repeat[i] = rndmColor;

            span.style.backgroundColor = rndmColor;
            span.setAttribute('color', `color-${rndmColor}`);
        }
        // if (lastItemsLength < (num / 2)) {
        //     lastItemsLength++;
        //     lastItems.push(repeat);
        // }
    }
}